services:
  # FastAPI Application (Images API)
  api:
    build: 
      context: ./api/
      dockerfile: Dockerfile
    container_name: alza_api
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - DB_HOST=${DB_HOST:-34.136.15.241}
      - DB_PORT=${DB_PORT:-5666}
      - DB_NAME=${DB_NAME:-apg_database}
      - DB_USER=${DB_USER:-apg_adm_v1}
      - DB_PASSWORD=${DB_PASSWORD:-hfuBZyXf4Dni}
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - CACHE_TTL_SECONDS=${CACHE_TTL_SECONDS:-300}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-5544}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - DB_MIN_CONNECTIONS=${DB_MIN_CONNECTIONS:-10}
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-20}
    expose:
      - "5544"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5544/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs/api:/app/logs

  # Django Web Application (Management System)
  django-web:
    build: 
      context: ./django-web/
      dockerfile: Dockerfile
    container_name: alza_django
    restart: unless-stopped
    environment:
      - DJANGO_DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-apg-corporate-super-secret-key-change-in-production-2024}
      - DJANGO_DATABASE_URL=${DJANGO_DATABASE_URL:-postgresql://apg_adm_v1:hfuBZyXf4Dni@34.136.15.241:5666/apg_crud}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - API_BASE_URL=${API_BASE_URL:-http://api:5544}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-34.136.15.241,localhost,127.0.0.1}
    expose:
      - "8880"
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    volumes:
      - django_static:/app/staticfiles
      - django_media:/app/media
      - ./logs/django:/app/logs

  # Redis Cache (compartido por ambos)
  redis:
    image: redis:7-alpine
    container_name: alza_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Gateway (maneja ambos proyectos)
  nginx:
    image: nginx:alpine
    container_name: alza_nginx
    restart: unless-stopped
    ports:
      - "8788:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./logs/nginx:/var/log/nginx
      - django_static:/var/www/static
      - django_media:/var/www/media
    networks:
      - app-network
    depends_on:
      - api
      - django-web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates (compartido)
  certbot:
    image: certbot/certbot
    container_name: alza_certbot
    restart: "no"
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  redis_data:
  django_static:
  django_media:
  certbot_conf:
  certbot_www:

networks:
  app-network:
    driver: bridge